<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | baking websites]]></title>
  <link href="http://bakingwebsites.co.uk/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://bakingwebsites.co.uk/"/>
  <updated>2014-07-02T14:50:04+01:00</updated>
  <id>http://bakingwebsites.co.uk/</id>
  <author>
    <name><![CDATA[Mike Hook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Code Coverage With NCover]]></title>
    <link href="http://bakingwebsites.co.uk/2009/12/07/testing-code-coverage-with-ncover/"/>
    <updated>2009-12-07T21:47:00+00:00</updated>
    <id>http://bakingwebsites.co.uk/2009/12/07/testing-code-coverage-with-ncover</id>
    <content type="html"><![CDATA[<p>I   ve been developing the recipe book website mostly using TDD (Test Driven Design) and I thought it would be interesting to measure the code coverage of my unit tests. After researching what tools were available it looked like <a href="http://www.ncover.com/">NCover</a> was the best fit for the sites technology stack. The commercial version has some good features, such as measures for cyclomatic complexity, however it is a bit out of my budget (of approximately   0!). Fortunately a <a href="http://www.ncover.com/download/community">community edition of NCover</a> is also available for free and it stills works just fine for analysing current .NET assemblies.</p>

<p>After installing NCover a console application is available for running code coverage analysis. I got this up and running but the command line interface isn   t exactly the most user friendly and the output is just a single summary report. I obviously wasn   t alone in these conclusions because back in 2006 Grant Drake developed the <a href="http://www.kiwidude.com/blog/2006/01/ncoverexplorer-debut.html">NCoverExplorer tool</a> to provide a GUI front end to NCover. This tool also has a community edition available (version 1.4) that works with the community edition of NCover.</p>

<h4>Starters - Setting up NCover Explorer</h4>


<p>The tool is fairly straight forward to setup, the NCover website includes instructions on how to setup the professional edition to <a href="http://docs.ncover.com/how-to/running-ncover-with-your-unit-testing-framework/nunit/">profile an NUnit test project</a>, and the settings are equivalent in the community edition. I also chose to specify which assemblies should be included in the coverage report as otherwise all the Sharp Architecture assemblies are included and the results are skewed.</p>

<p>After running the tool you are provided with an interactive view of the assemblies with the uncovered lines displayed in red. You can see how easy it is to identify the offending lines in the screen grab below:</p>

<p><a style="margin-bottom:1em;margin-right:1em;" href="http://4.bp.blogspot.com/_5hQeqbPSrks/Sx15F3sFlqI/AAAAAAAAAA8/yrLagOXdmxc/s1600/NCoverExplorer2.jpg"><img src="http://lh3.ggpht.com/_5hQeqbPSrks/Sx1745WamzI/AAAAAAAAAB4/PAdEtdGUeBE/s800/NCoverExplorer2.jpg" border="0" alt="" /></a></p>

<h4>The Main Course     Improving code coverage</h4>


<p>The results of my first report are shown below:</p>

<p><a href="http://imageshack.com/a/img268/8057/6zqn.jpg"><img class="alignnone size-full wp-image-31" title="NCover Report" src="http://imageshack.com/a/img268/8057/6zqn.jpg" alt="" /></a></p>

<p>The prime candidates for improvement were:</p>

<ul>
    <li>The RecipeBook.Data assembly. A couple of repository classes were not tested.</li>
    <li>The RecipeBook.Web.Controllers assembly. Some of the code paths in the controller methods were not covered.</li>
    <li>The RecipeBook.ApplicationServices assembly. Not tested at all, oops!</li>
</ul>


<p>By default NCover sets the acceptable coverage level at 95%, however I felt that this was overly strict. I would rather spend the time writing fewer tests that I ensure are of a high quality than writing tests just to cover every single line of code. So I reduced the threshold to 80% and added tests to cover the essential missing features. Below if my much more healthy looking report.</p>

<h4>For Desert     A report without the red sauce</h4>


<p>OK maybe I   m stretching the food analogy a little too far with my headings now! By red sauce I mean those nasty red bars that were blazed across nearly every line of the report. Below you can see the report looks much more healthy after adding some unit tests and trimming some unused code:</p>

<p><a href="http://imageshack.com/a/img163/5125/23o5.jpg"><img class="alignnone size-full wp-image-32" title="NCover Report - 80% coverage" src="http://imageshack.com/a/img163/5125/23o5.jpg" alt="" /></a></p>

<p>I will endeavour to keep the coverage level at a minimum of 80% from now, and hopefully add some more tests to bump off those remaining pesky red bars!</p>

<p>As usual, any comments on this post are welcome. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up the NUnit GUI]]></title>
    <link href="http://bakingwebsites.co.uk/2009/06/28/setting-up-the-nunit-gui/"/>
    <updated>2009-06-28T13:30:00+01:00</updated>
    <id>http://bakingwebsites.co.uk/2009/06/28/setting-up-the-nunit-gui</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve setup the project using the default &rsquo;S#arp architecture Application' template. I won&rsquo;t go into detail about the steps taken to do this as it is all covered in the Sharp Architecture documentation. However I did hit a snag setting up the <a href="http://www.nunit.org/index.php">NUnit</a> project so I&rsquo;ll expand on that in this post.</p>

<p>The Sharp Architecture template is setup for <a href="http://www.agiledata.org/essays/tdd.html">TDD</a> (Test Driven Design) and this is the approach I will be taking to the development. Having installed <a href="http://www.testdriven.net/">TestDriven.Net</a>, the tests can be run through visual studio, however I prefer the interface of the NUnit GUI. After each test run the results are displayed as a set of pleasing green ticks and/or nasty red crosses. Once you have a nice set of green ticks it becomes a bit of a fixation to keep it that way!</p>

<p>The unit tests for the visual studio project can be easily loaded into the NUnit GUI. All you need to do is go to File &ndash;&gt; Open Project and navigate to the bin folder of the test project. Opening the compiled assembly (dll) of the test project will load all the unit tests into the GUI. Hitting the run button returns a nice list of green ticks as expected. However after saving the NUnit test project something alarming happens on the next test run. The standard Sharp Architecture Data tests all fail and nasty set of red ticks appear!</p>

<p>The following error message is reported:</p>

<br />




<blockquote style="font-style:italic;">
SharpArch.Core.PreconditionException : Please add an AppSetting to your app.config for 'nhibernate.mapping.assembly.' This setting takes a comma delimited list of assemblies containing NHibernate mapping files. Including '.dll' at the end of each is optional.<br />
</blockquote>


<p>The error is pointing to a missing setting in the app.config file, however on checking the file the setting is present. Also the tests worked just fine before saving the NUnit project so why would they suddenly start to fail?</p>

<p>The cause of the test failures appears to have been saving the NUnit project, this pointed to some settings changes which NUnit may have made during the save. Taking a look at the NUnit project settings the possible cause of the problem became clear. There are a couple of directory and file paths in the settings, of particular interest are a &lsquo;Configuration File Name&rsquo; and &lsquo;ApplicationBase&rsquo; settings.</p>

<p><span style="font-size:100%;font-weight:bold;">Configuration File Name</span>
When the test project assembly is first loaded this setting has a value of <span style="font-style:italic;">RecipeBook.Tests.dll.config</span>, however after saving the NUnit project the <span style="font-style:italic;">.dll </span>part of the filename disappears. So NUnit is no longer able to find the config file and read the settings from it.</p>

<p><span style="font-weight:bold;">ApplicationBase</span>
The ApplicationBase setting remains blank, however if you have saved the NUnit project in a different directory to the test project assembly you will need to change this. The path needs to be the relative path from your test project base to the test assembly location.</p>

<p>Below is an image of the settings for my project:</p>

<p><a href="http://imageshack.com/a/img15/3503/csy7.jpg"><img alt="" border="0" src="http://imagizer.imageshack.us/v2/320x240q90/15/csy7.jpg" /></a>
After updating these settings NUnit was able to read the settings for the config file and the GUI happily reported a lovely set of green ticks :)<br /></p>
]]></content>
  </entry>
  
</feed>
