<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacking | baking websites]]></title>
  <link href="http://bakingwebsites.co.uk/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://bakingwebsites.co.uk/"/>
  <updated>2014-05-23T17:49:04+01:00</updated>
  <id>http://bakingwebsites.co.uk/</id>
  <author>
    <name><![CDATA[Mike Hook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloud Hosting for a Prototype Project]]></title>
    <link href="http://bakingwebsites.co.uk/2014/05/23/cloud-hosting-for-prototype/"/>
    <updated>2014-05-23T16:04:20+01:00</updated>
    <id>http://bakingwebsites.co.uk/2014/05/23/cloud-hosting-for-prototype</id>
    <content type="html"><![CDATA[<p><img src="http://imagizer.imageshack.us/v2/320x240q90/838/0fsb.jpg" class="alignleft" alttext="Square peg - Round hole"  /></p>

<br/><br/>


<p>Today I am investigating cloud hosting platforms for a green field web application, there are quite a few platforms out there now, however I&rsquo;ll be looking at some of the big hitters as they are tried and tested in the marketplace.</p>

<p>The full technology stack is still under review so the hosting capabilities need to be fairly flexible however the requirements we know for sure are:</p>

<ul>
<li>Able to spin up multiple instances to run testing, staging and production environments</li>
<li>Low cost, ideally zero for testing / staging as this is grass roots project!</li>
<li>Flexibility to host a range of technologies</li>
<li>High reliability / speed (this should be a given for any hosting environment)</li>
</ul>


<h2>Contenders ready!</h2>

<p>I&rsquo;m going to investigate 3 platforms against the main requirements above, Windows Azure, Amazon Web Services and Heroku. Each have their advantages, so lets find out which will be the best fit for our project.</p>

<h3>Azure</h3>

<p>Azure is the Microsoft Cloud offering. As such it has a Microsoft technologies leaning but is by no means limited to their stack.</p>

<h4>OS / Languages / DBs</h4>

<ul>
<li>Windows or Linux</li>
<li>.NET, Node.js, Java, PHP, Python, Ruby</li>
<li>Native DBs: Azure SQL Server</li>
<li>Third party DBs: Neo4j, MySQL, MongoDB (fiddly)</li>
</ul>


<h4>Pricing</h4>

<ul>
<li>30 day free trial then,</li>
<li>$10/month per site</li>
<li>$2.50/month per DB</li>
</ul>


<h3>AWS</h3>

<p>Amazon Web Services were one of the first cloud based hosting solutions out there. It is a mature platform with many options but lets see whether the acronyms compare favourably.</p>

<h4>OS / Languages</h4>

<ul>
<li>Windows or Linux</li>
<li>.NET, Java, PHP, Python, Ruby</li>
<li>Native DBs: SQL Server, MySQL, Oracle, PostgreSQL</li>
<li>Third party DBs: Neo4j, MongoDB, RavenDB (basically anything you can run on VM)</li>
</ul>


<h4>Pricing</h4>

<ul>
<li>12 months free for 1 instance / DB</li>
<li>$15/month per site</li>
<li>$40/month per DB</li>
</ul>


<h3>Heroku</h3>

<p>Heroku is more of a grass roots developer led cloud platform. It is well suited to an open source license free stack but will this be suitable for our application?</p>

<h4>OS / Languages</h4>

<ul>
<li>Windows or Linux</li>
<li>Node.js, Java, Python, Ruby</li>
<li>Native DBs: Postgres</li>
<li>Third party FBs: neo4j, MySQL</li>
</ul>


<h4>Pricing</h4>

<ul>
<li>1 dyno free, $35/month per extra instance</li>
<li>Dev DBs free (Up to 10K rows), Basic $9/month</li>
</ul>


<h2>And the winner is&hellip;</h2>

<p>The technology stack hasn&rsquo;t been chosen yet so we will just need to wait to see you the winner is!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Umbraco 4 Mysql to Azure Hosting]]></title>
    <link href="http://bakingwebsites.co.uk/2014/04/28/migrating-umbraco-4-mysql-to-azure-hosting/"/>
    <updated>2014-04-28T09:58:09+01:00</updated>
    <id>http://bakingwebsites.co.uk/2014/04/28/migrating-umbraco-4-mysql-to-azure-hosting</id>
    <content type="html"><![CDATA[<h2>Why Azure</h2>

<p>I recently inherited an Umbraco version 4 site and need to setup web hosting for it. I decided that Azure would be a good option for hosting as it offers great benefits for future scalability and a good costing model. I also wanted to try it out and see what all the fuss is about!</p>

<p>There were a few steps to carry out to get the site up and running in Azure, so I&rsquo;ve documented my experience here.</p>

<h2>First steps</h2>

<ul>
<li>Obviously you need to sign up to a <a href="http://azure.microsoft.com/">Windows Azure account</a>. Its free to try but you do need a credit card. I guess this makes it nice and seamless for Microsoft to start charging you if you opt to continue past the 1 month trial!</li>
<li>Now login to the portal and go to Websites &ndash;> new &ndash;> custom create &ndash;> enter details, selecting a mysql database from the drop down</li>
</ul>


<p><img src="http://imageshack.com/a/img834/4281/jf2b.png" class="alignleft" alttext="Azure create website dialog"  /></p>

<h2>Migrating the database</h2>

<ul>
<li>Click on the new website and go to the &lsquo;linked resources&rsquo; tab. The MySql Database should be listed here</li>
<li>Click the name to open ClearDB (the third party provider of MySql databases support for Windows Azure)</li>
<li>Setup MySQL workbench to connect to ClearDB using an <a href="https://github.com/CloudBees-community/tomcat-clickstack/wiki/ClearDB-::--MySQL-SSL-Connection-MySQL-Workbench">SSL connection</a>. You may also need to install OpenSSL to enable generation of the rsa key.</li>
<li>Reduce the database size to fit in the 20MB size limit by <a href="http://www.spyriadis.net/2012/07/umbraco-clear-old-document-versions-to-decrease-database-size-and-improve-performance/">removing old document versions and preview / log files.</a></li>
</ul>


<h2>Uploading the web site</h2>

<ul>
<li>Download the publish profile file from your azure account. It is available on the dashboard page of your website, under the &lsquo;quick glance&rsquo; menu</li>
<li>Open the site in WebMatrix, press publish and browse to select the publish profile file you just downloaded.</li>
<li>Web Matrix will now run a diff on the files and prompt you to upload any changes to Azure.</li>
<li>In Azure go to the site configure tab and set the app settings for &lsquo;umbracoDbDSN&rsquo; and any other connection string values to the ClearDB database connection string. If you are not sure what the connection string you can get it from the &lsquo;quick glance&rsquo; menu.</li>
</ul>


<p>I like this ability to set your production connection strings / app settings in Azure. This will be help enable me to open source the code without storing these secure settings in the config files themselves.</p>

<p>Hey presto, your site should be up and running!</p>

<h2>So, what&rsquo;s the verdict?</h2>

<p>Is Azure as nice a hue as promised or is it more murky in practice? Well from my experience its all worked pretty much as expected so far. Its clear the Microsoft has invested some serious resources into the platform and unlike some of their other products (ahem Windows 8) the usability is excellent.</p>

<p>I think this is a decent work flow to initially get a site up and running. However in the long term I would want to hook up source control for the site to publish when merging to a branch. There is an option in Azure to &lsquo;Set up deployment from source control&rsquo; so I will be investigating how this works next.</p>

<p>The main drawback I currently see with this setup is that the database has a limit on the number of connections. The free version has 4 which is fair enough, given it is just for trialling. However even the paid versions have low limits of 15, 30 or 40 for $10, $50 or $100 respectively. My feeling is that these limits may well cause problems when the site is running in production. I already hit the 4 connections limit just browsing the site myself and publishing a new page and it is bound to use more when real users are browsing at the same time.</p>

<p>The SQL databases offered in Azure do not have this connections limit and would also be significantly cheaper in the long run, so I will be investigating the feasibility of migrating the Umbraco DB from MySQL into SQL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating EPiServer 7 With MVC - Next Steps]]></title>
    <link href="http://bakingwebsites.co.uk/2013/04/09/integrating-episerver-7-with-mvc-next-steps/"/>
    <updated>2013-04-09T17:40:42+01:00</updated>
    <id>http://bakingwebsites.co.uk/2013/04/09/integrating-episerver-7-with-mvc-next-steps</id>
    <content type="html"><![CDATA[<p>My previous blog post, <a title="Integrating EPiServer 7 with an existing MVC  site" href="http://bakingwebsites.co.uk/2013/03/14/integrating-episerver-7-with-an-existing-mvc-site/">Integrating EPiServer 7 with an existing MVC site</a>, outlined the initial steps to get EPiServer 7 running. However there are a number of additional steps you may need to take before your site is fully integrated.</p>

<h3>Convert any Controllers not in Areas</h3>


<p>If your site only contains controllers within Areas then you should not need to make any changes. However controllers in the root of the site will not work by default (at least for me). I found it was best to deal with these controllers on a case per case basis as the best course of action depended on the function of the controller. I implemented one of the following changes for each:</p>

<ul>
    <li><span style="line-height:13px;">Move the controller into an area. This option makes sense if the views for the controller do not have any CMS editable content</span></li>
    <li>Convert the controller to be CMS managed. Makes sense if the views need to be CMS editable (inherit from  PageController&lt;T&gt; where T is a BasePage)</li>
    <li>Convert the controller to an HttpHandler. In one case the controller did not have any views or models, it was really just a different entrypoint to the site which ran a bit of logic and redirected. In this case there was no point in retaining the controller as an HttpHanlder could do the same job more efficiently</li>
</ul>




<h3>Disable strict language routing</h3>


<p>I encountered a further issue after patching my EPiServer.Core and EPiServer.Framework nuget packages to the latest versions. None of the controller actions in the home controller worked any more except for the Index. This was fairly easy to remedy by disabling the strict language routing, via the episerver/sites/site/strictLanguageRouting config setting.</p>

<h3>Deployment Issues</h3>


<p>While its all well and good having the site running on your machine, eventually it will need to be deployed somewhere. We handle configuration changes with file transforms and I was pleased to note that the config changes required for episerver deployments are now minimised. Here is a summary list of all the settings we changed per environment:</p>

<ul>
    <li><span style="line-height:13px;">connectionStrings
</span></li>
    <li>episerver/sites/site/siteSettings/siteUrl</li>
    <li>episerver.framework/siteHostMapping/siteHosts</li>
    <li>episerver.framework/appData/basePath</li>
    <li>episerver.framework/licensing/licenseFilePath</li>
    <li>episerver.search/namedIndexingServices/services/baseUri</li>
</ul>


<p>Note, you may need to transform further settings for a load balanced site.</p>

<h5>EPiServer UI not deployed</h5>


<p>Previously with EPiServer v6 all that was needed to run the CMS interface itself was to install the application on the web server. However the EPiServer 7 UI architecture also has a number of dependencies in the {VPP}\modules folder. So ensure that these files are also present in your deployed environment, otherwise you will probably encounter the following error:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">DirectoryNotFoundException: Could not find a part of the path '{Your site path} \Website\ClientResources\ClientResources\packages.config'</pre>




<h5>Search service configuration</h5>


<p>We have the search service configured on a local host name as the indexing service does not like to communicate over a public host name. However this caused a further issue with the service reporting that multiple hosts names could not be run for the service. Fortunately this could be remedied easily by setting the system.serviceModel/serviceHostingEnvironment/multipleSiteBindingsEnabled  setting to true.</p>

<p>Those were all the steps we needed to take to deploy the site successfully. I&rsquo;d be interested to hear your experiences if you found any other settings that need to be changed. Feel free to reply in the comments below or contact me directly on twitter <a href="https://twitter.com/michael_hook">@michael_hook</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating EPiServer 7 With an Existing MVC Site]]></title>
    <link href="http://bakingwebsites.co.uk/2013/03/14/integrating-episerver-7-with-an-existing-mvc-site/"/>
    <updated>2013-03-14T15:54:57+00:00</updated>
    <id>http://bakingwebsites.co.uk/2013/03/14/integrating-episerver-7-with-an-existing-mvc-site</id>
    <content type="html"><![CDATA[<p><img class="alignright size-full wp-image-408" alt="custom_integration" src="http://imageshack.com/a/img560/4853/3rqu.jpg" width="300" />This post assumes you have EPiServer 7 installed on your machine. If you don&rsquo;t have it then it is available from <a href="http://world.episerver.com/Download/Categories/Products/EPiServer-CMS/">EPiServer world</a>  (once you have created an account).</p>

<p>There are 2 main options for creating a new EPiServer 7 MVC stylee site:</p>

<ul>
    <li><span style="font-size:13px;">Create a new Visual studio project (after installing 'EPiServer 7 Visual Studio Integration', available from </span><a style="font-size:13px;" href="http://world.episerver.com/Download/Categories/Products/EPiServer-CMS/">EPiServer world</a><span style="font-size:13px;">)</span></li>
    <li><span style="font-size:13px;line-height:19px;">Use the </span><a style="font-size:13px;line-height:19px;" href="http://world.episerver.com/Articles/Items/ASPNET-MVC-Templates-for-EPiServer-7-CMS/">EPiServer 7 MVC templates package</a></li>
</ul>


<p>For integrating with an existing site I&rsquo;d recommend using option 1, as there are far less files to integrate. However it is well worth looking at the templates package as well as this demonstrates how models and views can be implemented with EPiServer 7.</p>

<p>After creating the new Visual Studio project I remembered that EPiServer have a NuGet feed, and they do have the version 7 assemblies on NuGet. However the version numbers are slightly different to those used in the visual studio project, so make sure you specify the version numbers to NuGet when you install the packages (they are listed below). Here are the steps I followed in detail:</p>

<ol>
    <li><span style="line-height:13px;">Created a new Visual studio project using the EPiServer Web Site (MVC) template
</span></li>
    <li>Followed the EPiServer tutorial (<strong>link</strong>) to add a home page and set it to the 'start page'</li>
    <li>Upgraded my existing site to MVC 4 by installing the Microsoft ASP.NET MVC 4 nuget package (obviously not required if your existing site is already on MVC version 4.</li>
    <li>Copy across the connectionStrings.config, episerver.config,  EPiServerFramework.config, EPiServerLog.Config and FileSummary.config files</li>
    <li>Update the  siteUrl in  episserver.config.</li>
    <li>Copy the AppData, IndexingService, modules and modules bin folders.</li>
    <li>Merge the web.config files - ensure the  episerver.search baseUri is updated to point at your site address.</li>
    <li>Installed EPiServer 7 from Nuget feeds using these commands to get the correct versions:
<ul>
    <li>Install-Package EPiServer.Framework -Version 7.0.859.1</li>
    <li>Install-Package EPiServer.CMS.Core -Version 7.0.586.1</li>
</ul>
</li>
    <li>Removed assembly references to Razor and System.WebPages.Razor (as was clashing with EPiServer versions)</li>
    <li>Update Controllers to inherit from  PageController&lt;T&gt; where T is a PageData class.</li>
    <li>Update Global.asax to inherit from  EPiServer.Global</li>
</ol>




<h2><strong>IoC containers clashing!</strong></h2>


<p>OK, this is the tricky bit it gets quite involved but please stay with me!</p>

<p>When I tried to run the site it now returned a &lsquo;No parameterless construct or defined for this object.&rsquo; message. Which in plainer  English  means the application can&rsquo;t create the Controller classes. This is because the site I am integrating with currently uses the Castle Windsor IoC container, however EPiServer uses the StructureMap IoC container internally. We  definitely  don&rsquo;t want two IoC containers and I can&rsquo;t see any evidence of the EPiServer container being swappable. So the only option here is to convert the current Windsor implementation to a StructureMap implementation. More information on Structure map can be found on the excellent <a href="http://docs.structuremap.net/">StructureMap documentation site</a>, however I think it is worth including an overview in this post as, whilst this isn&rsquo;t always going to be necessary for your site, I expect it will be a common problem.</p>

<h4>Add StructureMap version 2.6.1.0</h4>


<p><span style="font-size:13px;">This is available from NuGet (as this is the version used in the EPiServer 7 MVC templates package).
The command to install is:  </span><span style="font-size:13px;">Install-Package StructureMap  -Version  2.6.1.0</span></p>

<h4>Register your services with StructureMap</h4>




<ul>
    <li><span style="font-size:13px;">Copy the  StructureMapDependencyResolver and DependencyResolverInitialization  classes from the EPiServer MVC templates project.</span></li>
    <li>Convert service registration calls to register services with StructureMap instead of Windsor. This is carried out in the  ConfigureContainer method of the  DependencyResolverInitialization class.</li>
</ul>


<p>For example here is a Windsor interface registration and its equivalent StructureMap registration:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">//Windsor registration - Here container is an implementation of IWindsorContainer
var myConfig = WebConfigurationManager.GetSection("myConfig") as MyConfig;
container.Register(Component.For(typeof(IMyConfig)).Instance(myConfig));</pre>




<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">//StructureMap registration - Here container is of type ConfigurationExpression
var myConfig = WebConfigurationManager.GetSection("myConfig") as MyConfig;
container.For&lt;IMyConfig&gt;().Use(myConfig);</pre>


<p>An example of a class registration with a singleton lifestyle:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">//Windsor registration
container.Register(Component.For(typeof(Cache)).Instance(HttpContext.Current.Cache).LifestyleSingleton());</pre>




<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">//StructureMap registration
container.For(typeof(Cache)).Singleton().Use(HttpContext.Current.Cache);</pre>




<ul>
    <li><span style="font-size:13px;">Convert  </span><em style="font-size:13px;">IWindsorInstaller</em><span style="font-size:13px;">  implementations  to  </span><em style="font-size:13px;">Registry</em><span style="font-size:13px;">  subclasses.</span></li>
</ul>




<h4>Debugging your StructureMap registrations</h4>


<p>You can debug structure map by adding this line:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">_container.AssertConfigurationIsValid();</pre>


<p>Initially EPiServer was reporting many registration failures but you can delay the call until the InitComplete event is called in the DependencyResolverInitialization class. Then most of the EPiServer  registrations have completed and it is easier to see if there are any issues with your own services.</p>

<h4>Manually retrieving a service</h4>


<p>Generally my services are injected into constructors automatically, however I had a couple of calls to retrieve services manually from the IoC container. For example, to retrieve an implementation of an interface called IMyService:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">_var myService = DependencyResolver.Current.GetService&lt;IMyService&gt;();</pre>




<h4>Last steps</h4>


<p>Hopefully your site will be running now, there is some additional configuration work you may want to do for EPiServer 7 VPP folders. But if you&rsquo;ve made it this far you will probably need a break!</p>

<h5>Updated on 9th April 2013</h5>


<p>Updated the list of config files which must be copied to include EPiServerLog.config and FileSummary.config</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Footy Links Alpha Released]]></title>
    <link href="http://bakingwebsites.co.uk/2012/01/25/footy-links-alpha-released/"/>
    <updated>2012-01-25T09:34:41+00:00</updated>
    <id>http://bakingwebsites.co.uk/2012/01/25/footy-links-alpha-released</id>
    <content type="html"><![CDATA[<p><img class="size-full wp-image-332 alignleft" title="FootyLinksLogo" src="http://imageshack.com/a/img834/6565/3iks.jpg" alt="" width="150" />The very first version of Footy Links is now available for download from the Android Market.
You can get the app by opening the following website on your android device and press the &lsquo;Install&rsquo; button:
<a href="https://market.android.com/details?id=mhook.FootyLinks">Footy Links on the Android Market</a></p>

<h2>What is Footy Links?</h2>


<p>Footy links is a game designed to test your football knowledge by guessing clubs connecting premiership football players.  Make your guess by clicking on the blue text then selecting the club badge matching the answer.</p>

<p>There is a basic scoring system following these rules:</p>

<ul>
    <li>+1 point for every correct guess of a 'top six' club</li>
    <li>+2 points for a correct guess of any other club</li>
    <li>-1 point each time you skip to another question without answering the previous one</li>
</ul>




<h2>Can I play it?</h2>


<p>If you have an Android based mobile device I hope so, it should work on any device with Android OS version 2.2 or above. If you have any problems running the game feel free to contact me here on <a href="http://bakingwebsites.co.uk">my blog</a> or through <a href="https://twitter.com/#!/michael_hook">twitter</a></p>

<h2>Is that it?</h2>


<p>As you may be able to tell from the title, in the spirit of agile development (or maybe just because I&rsquo;m lazy), this is an early version with the absolute minimum set of features. I really wanted to just get a version out there in the wild to see if it will work on anyone&rsquo;s phone other than my own!</p>

<p>But do not fear, more versions are planned with lots of exciting extra features, possibly including:</p>

<ul>
    <li>Harder difficulty levels - more links to guess between each of the players</li>
    <li>More advanced scoring system</li>
    <li>Multi-player games</li>
    <li>Online high score board</li>
    <li>Inclusion of all English leagues</li>
    <li>Inclusion of  European  league clubs</li>
</ul>


<p>If you have any suggestions about Footy Links then please feel free to get in contact with me  here on  <a href="http://bakingwebsites.co.uk">my blog</a>  or through  <a href="https://twitter.com/#!/michael_hook">twitter</a></p>

<h2>The Techy Bit</h2>


<p>If you&rsquo;re interested in how the app works behind the scenes, the source is freely available for viewing on my github account here:
<a href="https://github.com/MikeHook/FootyLinks">Footy  Links on github</a></p>

<p>The source consists of two applications</p>

<ul>
    <li>A .NET application written to import the football club and player data into a Sqlite database</li>
    <li>An android application for the game itself</li>
</ul>

]]></content>
  </entry>
  
</feed>
