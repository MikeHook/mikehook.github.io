<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips and Tricks | baking websites]]></title>
  <link href="http://bakingwebsites.co.uk/blog/categories/tips-and-tricks/atom.xml" rel="self"/>
  <link href="http://bakingwebsites.co.uk/"/>
  <updated>2015-12-22T14:55:14+00:00</updated>
  <id>http://bakingwebsites.co.uk/</id>
  <author>
    <name><![CDATA[Hook Technologies Ltd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rebase Your Way to Git Enlightenment]]></title>
    <link href="http://bakingwebsites.co.uk/2015/08/16/rebase-git-enlightenment/"/>
    <updated>2015-08-16T18:07:49+01:00</updated>
    <id>http://bakingwebsites.co.uk/2015/08/16/rebase-git-enlightenment</id>
    <content type="html"><![CDATA[<p><img src="http://i49.photobucket.com/albums/f299/hookmike/Pat-Morita_Karate_Kid_200_zpscufzef0b.jpg" class="alignleft" title="Pat Morita" /></p>

<p>The path to Git enlightenment can be a long one for a developer used to centralized source control such as SVN.</p>

<p>The first signs of trouble usually occur when trying to apply changes from one branch of code to another. Some file change conflicts are likely if the same source file has been changed on both branches. The source control system has no way to know which changes should be kept so it will quite rightly ask the developer to choose, however this can cause some difficulty if the changes have been made by someone else who may not even be around to ask what has happened.</p>

<p>I have a feeling that the great Mr Miyagi would have loved using Git, as patience and dedication to the ways of <a href="https://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a> are well rewarded in time. Indeed, dealing with branches is one situation where patience is important to avoid introducing regression bugs.</p>

<p><blockquote><p>Patience, young grasshopper.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Kesuke_Miyagi">https://en.wikipedia.org/wiki/Kesuke_Miyagi</a> Kesuke Miyagi</strong></footer></blockquote></p>

<p>There are a couple of different techniques which can be used to bring the changes on two branches together and the Atlassian site has a great write up of these in it&rsquo;s <a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing/">merging vs rebasing article</a>. The article describes the following scenario, you have created a <strong>feature</strong> branch from the <strong>master</strong> and made some commits to your branch. Someone else has since made some changes to the master branch which you now need to include in your branch, to get these changes you can either merge or rebase.</p>

<p>My personal preference is to use the rebase command where possible for one key reason, <strong>merge conflicts are easier to resolve!</strong> The reason for this is that when rebasing you apply <strong>your changes</strong> on top of the master changes. This is different to a merge which will apply the master changes on top of your feature changes. So effectively any conflicts which occur will be due to changes made by yourself instead of someone else. My memory may not be great but I stand roughly 100% more chance of remembering something I&rsquo;ve done as opposed to something someone else has done!</p>

<p>Hopefully you can see the benefits of this and are thinking, &lsquo;great I&rsquo;m going to give that a go!&rsquo; But before you rush off a few words of warning, there is potential for things to go horribly wrong.</p>

<p><blockquote><p>First learn stand, then learn fly</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Kesuke_Miyagi">https://en.wikipedia.org/wiki/Kesuke_Miyagi</a> Kesuke Miyagi</strong></footer></blockquote></p>

<p>The trouble comes if there are 2 people working on the feature branch who have both pushed changes to a remote repository. If you haven&rsquo;t fetched their changes before you push the rebased feature branch their changes will get overwritten and lost forever! That would be bad but Git does try to help you out by blocking the push, actually the only way you can push the rebased branch is by passing an extra parameter to <strong>force</strong> the push. So this acts as a nice reminder to think about what you are doing, only tick that &lsquo;force push&rsquo; box if you are sure your branch is fully up to date. Actually I&rsquo;d never use rebase if I had any doubt that anyone else might be working on the same branch as me.</p>

<p>A final note about rebase, it may be difficult to carry out with some Git GUI tools. Some of my colleagues like using <a href="https://www.sourcetreeapp.com/">Source Tree</a> and I&rsquo;ll agree it does look nice, however it doesn&rsquo;t support this workflow well at all. After starting a rebase you get left in a weird limbo state and have to keep re-requesting to rebase the branches after each and every commit. Then once the rebase is complete there is no way to force the push through the UI, you have to drop down to the command line to complete the action. I&rsquo;d recommend giving <a href="https://code.google.com/p/gitextensions/">Git Extensions</a>, the reliable Ford Mondeo of Git GUIs, a go for this scenario, it work much more smoothly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Become a Git Contortionist With Stash]]></title>
    <link href="http://bakingwebsites.co.uk/2013/01/18/become-a-git-contortionist-with-stash/"/>
    <updated>2013-01-18T19:16:05+00:00</updated>
    <id>http://bakingwebsites.co.uk/2013/01/18/become-a-git-contortionist-with-stash</id>
    <content type="html"><![CDATA[<p><img class="size-medium wp-image-364 alignright" alt="Annie the Contortionist" src="http://imageshack.com/a/img856/5731/jyt7.jpg" width="300" />One of the great aspects of the Git source control system is its flexibility. Almost any sticky situation you may encounter  as a developer working with source control can be   solved with Git.</p>

<p>Take this scenario, you&rsquo;re halfway through writing a class for a new feature when you get a call.. the client has found a show stopping bug in the application and it needs to be fixed right away. To be able to fix the bug you will need to switch onto the live code branch but you can&rsquo;t go switching branches with a load of uncommitted changes.  Now you don&rsquo;t want to commit your code as its half done and won&rsquo;t even compile right now, but you don&rsquo;t want to lose the changes either&hellip; <a href="http://git-scm.com/book/en/Git-Tools-Stashing"><em>git stash</em></a> to the rescue!</p>

<p>When you issue the git stash command all your changes will be committed to a stack. Leaving you with no changes on your current working branch and free to branch where ever you want. So now you can switch to the live branch and do your bug fixing work. Once that is done you can simply move back to the feature branch and <em>apply</em> the stashed changes. Hey presto, you are back where you started with your uncommitted half complete work!</p>

<p>If you really get into lots of parallel work you can stash multiple times, just be sure to remember that it is a stack and your last changes you have stashed will come back off stack first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beauty of Cherry Pick]]></title>
    <link href="http://bakingwebsites.co.uk/2011/10/06/the-beauty-of-cherry-pick/"/>
    <updated>2011-10-06T18:00:59+01:00</updated>
    <id>http://bakingwebsites.co.uk/2011/10/06/the-beauty-of-cherry-pick</id>
    <content type="html"><![CDATA[<p>I&rsquo;m loving the <a href="http://gitready.com/intermediate/2009/03/04/pick-out-individual-commits.html">cherry pick command</a> in git right now, this is the scenario that it really helps me out for.</p>

<p>I&rsquo;ve fixed a bug on the live branch, however before it can be published to the live website it needs to be tested. So I can first publish it to our UAT (user acceptance testing) site so the client can test the changes. However the UAT site already has a bunch of other unreleased features on it. If I merge my bug fix branch into the UAT branch it will overwrite some of the other feature changes.</p>

<p>The solution here is to &lsquo;cherry pick&rsquo; just my changes from my bug fix branch and commit those to the UAT branch. In this way git doesn&rsquo;t merge all the other differences between the live and UAT branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Dev Tip - Fix the Eclipse Auto-complete]]></title>
    <link href="http://bakingwebsites.co.uk/2011/03/10/android-dev-tip-fix-the-eclipse-auto-complete/"/>
    <updated>2011-03-10T16:39:43+00:00</updated>
    <id>http://bakingwebsites.co.uk/2011/03/10/android-dev-tip-fix-the-eclipse-auto-complete</id>
    <content type="html"><![CDATA[<p>I recently had problems with the eclipse IDE auto-complete not working.</p>

<p>After Googling the problem, I managed to resolve this by downloading the source for the version I was using and extracting into the Android SDK folder, as detailed in <a href="http://code.google.com/p/android/issues/detail?id=7850#c8">this google code issue</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Handle the MVC HttpAntiForgeryException]]></title>
    <link href="http://bakingwebsites.co.uk/2011/02/10/how-to-handle-the-mvc-httpantiforgeryexception/"/>
    <updated>2011-02-10T21:24:16+00:00</updated>
    <id>http://bakingwebsites.co.uk/2011/02/10/how-to-handle-the-mvc-httpantiforgeryexception</id>
    <content type="html"><![CDATA[<p>When developing forms for websites it is good practice to guard against <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">cross site request forgery</a> attacks. In MVC it is straightforward to do this using the <em>AntiForgeryToken()</em> helper method and the  <em>ValidateAntiForgeryToken </em>attribute (<a href="http://blog.stevensanderson.com/2008/09/01/prevent-cross-site-request-forgery-csrf-using-aspnet-mvcs-antiforgerytoken-helper/">as explained by Steve Sanderson</a>). However a side effect of this is that an  <em>HttpAntiForgeryException </em>like this will be thrown whenever a forgery attack is prevented:</p>

<blockquote>System.Web.Mvc.HttpAntiForgeryException: A required anti-forgery token was not supplied or was invalid.</blockquote>


<p>This is not generally a problem unless the site has been setup to notify you of any exceptions by email. Then you may find that your inbox quickly fills up with spam error reports and I think there is already quite enough spam in the world!
The fix for this is to catch the exception before it makes it out of the application and into your inbox. The exception can be caught by adding the <em>HandleError </em>attribute to the controller class declaration as shown below:</p>

<pre style="background-color:#eeeeee;border:1px dashed #999999;color:black;font-family:andale mono, lucida console, monaco, fixed, monospace;font-size:12px;height:150px;line-height:14px;overflow:auto;width:100%;padding:5px;"><code>[HandleError(ExceptionType=typeof(HttpAntiForgeryException), View="Unauthorised")]
public class MyController : Controller
{
  ...
   public ActionResult Unauthorised()
  {
     return View("Unauthorised");
  }
}
</code></pre>


<p>Once the attribute has been added the <em>Unauthorised </em>view should be shown if a forgery attempt is intercepted. However in my case a different exception of the type shown below  was thrown instead:</p>

<blockquote>The model item passed into the dictionary is of type 'System.Web.Mvc.HandleErrorInfo' but this dictionary requires a model item of type 'Core.Web.ViewModels.ISomeViewModel'.</blockquote>


<p><span style="font-family:Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;line-height:19px;white-space:normal;font-size:13px;">This exception is thrown because (as described  <a href="http://aspnet.codeplex.com/workitem/1795">in this work item</a> on the MVC issue tracker) the default view model has been replaced by a <em>HandleErrorInfo </em>object and our master page is trying to access properties in the normal view model. So the straightforward fix for this is to remove the dependancy on the master page from the <em>Unauthorised </em>view. </span></p>
]]></content>
  </entry>
  
</feed>
