<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Design | baking websites]]></title>
  <link href="https://bakingwebsites.co.uk/blog/categories/software-design/atom.xml" rel="self"/>
  <link href="https://bakingwebsites.co.uk/"/>
  <updated>2016-06-20T15:07:59+01:00</updated>
  <id>https://bakingwebsites.co.uk/</id>
  <author>
    <name><![CDATA[Hook Technologies Ltd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inspiring Software Design]]></title>
    <link href="https://bakingwebsites.co.uk/2015/09/06/inspiration/"/>
    <updated>2015-09-06T18:07:49+01:00</updated>
    <id>https://bakingwebsites.co.uk/2015/09/06/inspiration</id>
    <content type="html"><![CDATA[<p><a href="http://www.603copywriting.co.uk/blog-post-ideas/"><img src="https://googledrive.com/host/0Bx-8nw9dhAQcN1lWbU1SLW91bEk/idea.jpg" class="alignleft" title="Ideas lightbulb" /></a></p>

<p>The software design process can sometimes be difficult to quantify. From an external perspective of a development team, requirements go in and working software comes out. But what exactly happens in the middle to turn the stakeholders hopes and dreams into reliable, executable code?</p>

<p>At its core software design is a methodical, incremental engineering process and there are no short cuts to this process if we want to produce good results. However making really great software that will stand the test of time often requires a little something extra, a bit of inspiration. So where exactly does that spark come from and how can we help create the conditions to nurture it?</p>

<h2>A sticky design problem</h2>

<p>I&rsquo;ve recently been working on a feature to enable users to update their profiles through a web application. This is a pretty standard problem however some extra complexities were introduced by the target platform. Chief among those was the user interface which needed to be asynchronous and fit in with the applications existing front end <a href="https://en.wikipedia.org/wiki/Single-page_application">SPA framework</a>.</p>

<p>I like to implement using the &lsquo;<a href="http://programmers.stackexchange.com/questions/166409/tdd-outside-in-vs-inside-out">outside in</a>&rsquo; approach so began with the user interface, adding one section at a time then abstracting any common patterns to make them reusable. However, after a day at the coal face writing code I took a step back and wasn&rsquo;t pleased with my results. The code was reaching a point where I was struggling to keep track of the workflow in my own head which doesn&rsquo;t exactly bode well for the poor guy that would inevitably need to modify it 6 months down the line. The trouble was no matter how hard I stared at those lines of code a more elegant and simple solution would not present itself!</p>

<p>The very next day I woke up feeling sick and not be able to get into the office to finish implementing the UI. However, it may well have been the most productive &lsquo;time off&rsquo; work I&rsquo;ve had in some time. As I recuperated watching Hobbits and Orcs do battle on a grand scale my mind drifted back to the problems I&rsquo;d been having yesterday. It suddenly became clear to me that I had been abstracting at too low a level and trying to fit all of the behaviour into a single javascript module. However if I just created a single module per user profile element I could create a common &lsquo;interface&rsquo; for each module and easily iterate over them in the main module.</p>

<h2>Emergent architecture</h2>

<p>This new approach had all the hallmarks of a good design as my own reaction was along the lines of &lsquo;that is so obviously better, why didn&rsquo;t I just do it like that in the first place?!&rsquo; That is a pertinent question, and one that has probably troubled many a software developer. However my feeling is that often it is not possible to skip the &lsquo;bad design&rsquo; and go straight to the better solution because you don&rsquo;t know what all the problems are going to be until you start implementing. Thomas Edison summed this up nicely in one of his most famous quotes:</p>

<p><blockquote><p>What it boils down to is one per cent inspiration and ninety-nine per cent perspiration.</p><footer><strong>Wikiquote <a href="https://en.wikiquote.org/wiki/Thomas_Edison">https://en.wikiquote.org/wiki/Thomas_Edison</a> Thomas Edison</strong></footer></blockquote></p>

<p>While its certainly true that experience can help you see patterns and spot the problems earlier I think it is a mistake to try and design everything meticulously up front. There is bound to be some devil in the detail which makes you pivot on the design halfway through so a lot of that up front time will have been wasted.</p>

<p>I find it is best to have a balance, with an initial high level draft plan for the implementation usually implemented through UML modelling. This helps guide lower level design decisions and keep one eye on the bigger picture. To make the lower level design decisions I try and stay agile, adapt the code as I&rsquo;m going along and keep complexity at a minimum.</p>

<h2>Encouraging those aha! moments</h2>

<p>Often my best ideas are formed away from the computer, hours or even days after the initial problem arose. The sub conscious mind is an amazing tool which can help you solve many intractable issues if you can give it the space and time to join up those dots. Despite what our employment contracts may say, software development really isn&rsquo;t a 9 to 5 job. In fact working &lsquo;harder&rsquo; during those office hours can sometimes be counter productive when it comes to making great software. Good decisions and great solutions are formed in relaxed and fresh minds, for that reason I&rsquo;d have to list my bike as one of my most essential software design tools!</p>

<p>As developers we can encourage good software design by focussing on a couple of key elements:</p>

<ul>
<li>Collaborate on design, decisions should be guided by <a href="http://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/">the ten commandments of egoless programming</a></li>
<li>Ensure your estimates include enough contingency to allow for rapid prototyping and iterations during implementation.</li>
<li>Stay pragmatic; aim high but know that perfection is subjective. Establishing coding standards can help guide when a design is good enough</li>
</ul>


<p>Do you have any particular techniques to help inspire your software designs? If so I&rsquo;d love to hear about them and try them out myself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Awesome Software With Lean Principles - Part II]]></title>
    <link href="https://bakingwebsites.co.uk/2015/07/26/lean-awesome-part-II/"/>
    <updated>2015-07-26T18:07:49+01:00</updated>
    <id>https://bakingwebsites.co.uk/2015/07/26/lean-awesome-part-II</id>
    <content type="html"><![CDATA[<p><img src="http://i49.photobucket.com/albums/f299/hookmike/74078639-2d6b-4179-883d-4be7d28c19c7_zpsbpo9illj.jpg" class="alignleft" title="Awesome image by Roberlan https://www.flickr.com/photos/roberlan" /></p>

<p>In the <a href="https://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I/">first part of Making awesome software with Lean principles</a> I started looking at how <a href="https://en.wikipedia.org/wiki/Lean_software_development">Lean principles</a> have helped me while working on the <a href="http://midsussextriclub.com/">Mid Sussex Tri Club website</a>.</p>

<p>The first three principles <strong>Eliminating waste</strong>, <strong>Amplifying learning</strong> and <strong>Deciding as late as possible</strong> are all fundamental to help guide software development. However they only form part of the picture, there are still four more principles remaining that help guide our decisions so let&rsquo;s take a look at them now.</p>

<h2>Deliver as fast as possible</h2>

<p><blockquote><p>In the era of rapid technology evolution, it is not the biggest that survives, but the fastest. The sooner the end product is delivered without major defects, the sooner feedback can be received, and incorporated into the next iteration.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I&rsquo;ve seen the benefits of an iterative approach over and again throughout my professional life so I regard this as an essential principle to apply to all software projects. I put in place a pretty slick release process as one of the first changes I made and have been reaping the benefits ever since. Basically any check-ins on the master branch of the source code repository are immediately deployed to the website. I&rsquo;ve already blogged about how I set-up this <a href="https://bakingwebsites.co.uk/2014/07/02/automated-azure-deployments/">&lsquo;zero-click&rsquo; deploy process</a> and it has worked largely without problems since set-up.</p>

<p>However, this technique must be used with caution and certainly in tandem with the &lsquo;<strong>Build quality in</strong>&rsquo; principle. It is essential to ensure that a suitable branching process is in place too and changes can only be deployed once they have been tested. If you are working in a larger team I&rsquo;d recommend limiting write access to the master branch to a single person who can coordinate the deployments. While automation is great for productivity people still need to understand how it all works and retain control of the systems.</p>

<h2>Empower the team</h2>

<p><blockquote><p>The lean approach favors the aphorism &ldquo;find good people and let them do their own job,&rdquo; encouraging progress, catching errors, and removing impediments, but not micro-managing.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I have been fortunate to be involved with an organisation that trusted me to make the technical decisions. I presented my ideas on the features to implement and got feedback on any changes they thought may be needed. So I was empowered to make the changes as and when they were needed. However I also think it is important to &lsquo;bring the stakeholders with you&rsquo; when making the changes. This has several benefits, not only does it help ensure that the features are relevant, it also gives me some good candidates for people to test the system before it goes live, which brings me neatly onto the next principle!</p>

<h2>Build quality in</h2>

<p><blockquote><p>Conceptual integrity means that the system’s separate components work well together as a whole with balance between flexibility, maintainability, efficiency, and responsiveness.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>As I mentioned earlier, this principle acts as a counterweight to some of the other Lean principles, such as <strong>Deliver as fast as possible</strong>, to help ensure that changes are not rushed and the software doesn&rsquo;t accumulate bugs and brittle implementations. For this project I&rsquo;ve not had the luxury of any other developers who could review the code, however I&rsquo;ve still ensured that changes are functionally reviewed before deploying them to the live site. To facilitate this I&rsquo;ve setup a &lsquo;staging&rsquo; environment using the same deployment technique running off a separate &lsquo;staging&rsquo; repository branch. I first implement the changes on the staging branch and only merge them into the live &lsquo;master&rsquo; branch once someone has tested them out on the staging website.</p>

<p>On one occasion I skipped the staging process and fate taught me a lesson! The update was to use an Umbraco plugin to automatically resize images but little did I know that there was a memory leak in the Umbraco plugin which meant the site quickly went over its memory allocation and Azure automatically took it offline. That was a nasty surprise to find on the live site and some load testing in the staging environment would certainly have helped!</p>

<h2>See the whole</h2>

<p><blockquote><p>By decomposing the big tasks into smaller tasks, and by standardizing different stages of development, the root causes of defects should be found and eliminated.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>There are two key elements to the last principle, <strong>See the whole</strong>. I&rsquo;ve already talked about how the staging and live environments are standardized, in my case this was a fairly trivial exercise made easy by modern hosting tools such as Azure and github that enable multiple environments to be set up at very low cost. The small fee to run an extra Azure database is well worth the value it adds for  the club.</p>

<p>The second element recommends splitting tasks into smaller pieces and is certainly one that I&rsquo;d advocate. Limiting the number of changes made at any one time really helps with tracking down issues. Its a practice which I&rsquo;ve learnt the hard way over the years, it can be tempting to try and &lsquo;fix the world&rsquo; when you get your hands on a code-base and hammer out a high number of changes in a short time. However, not only does this massively increase the probability for bugs, it also makes finding them much more difficult. Looking for a bug in a commit with 50+ changed files isn&rsquo;t much fun!</p>

<p>I&rsquo;ve used the <a href="https://github.com/MikeHook/MSTC/issues">github issue tracker</a> on this project, which may seem a bit odd when there is no one else to share the work with, however it has helped keep me focussed on what I&rsquo;ve been trying to achieve, also its nice to get the satisfaction of pressing the &lsquo;Closed&rsquo; button after fixing each issue!</p>

<h2>Lean == Awesome</h2>

<p>I hope you&rsquo;ve enjoyed reading about my experiences with Lean principles. I&rsquo;d love to hear about any opinions you&rsquo;ve got regarding the way I&rsquo;ve interpreted the principles or how you&rsquo;ve used the principles to make your own awesome software, so feel free to comment on the posts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Awesome Software With Lean Principles - Part 1]]></title>
    <link href="https://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I/"/>
    <updated>2015-07-19T18:12:49+01:00</updated>
    <id>https://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I</id>
    <content type="html"><![CDATA[<p><a href="http://midsussextriclub.com"><img src="http://i49.photobucket.com/albums/f299/hookmike/MSTC%20_logo_yellow_280_zps4tnfm4qj.jpg" class="alignleft" alttext="MSTC Logo" /></a></p>

<p>I&rsquo;ve been a keen amateur triathlete and member the <a href="http://midsussextriclub.com">Mid Sussex Tri Club</a> for a couple of years. Its a relatively small club but there is a surprising amount of administration involved in running it and after chatting to some of the clubs committee members it was clear that the admin overheads were becoming a burden. I could see the potential for software to help lessen the burden so I offered to take on the club&rsquo;s website and add some features to it.</p>

<p>Fast forward a year and we have a greatly enhanced website with new features that have helped grow the club without taking up more of people&rsquo;s time. Throughout making these changes I&rsquo;ve applied Lean software principles which have really helped me. So in this post I&rsquo;m taking a look at the first 3 principles of Lean and how these have assisted on this project.</p>

<h2>Eliminate waste</h2>

<p><blockquote><p>Lean philosophy regards everything not adding value to the customer as waste.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I had great motivation to ensure that this principle was applied as I&rsquo;ve been making all the changes during my spare time. Its amazing what you can achieve in a short amount of time with a bit of planning. For example just last week I was able to add 2 new payment options to the site in an hour. The key techniques I&rsquo;ve used to help eliminate waste are:</p>

<ul>
<li>Make sure I understand what the key stakeholder wants to achieve from the feature before implementing it</li>
<li>Design directly in HTML &ndash; I&rsquo;ve designed all the new user interfaces directly in HTML so when it comes to implementing the feature I just need to enhance the existing HTML with the dynamic data elements</li>
<li>Use third parties to do the heavy lifting (ie. don&rsquo;t reinvent the wheel). For this project the key third party systems used are <a href="http://umbraco.com/">Umbraco</a> for content management, <a href="http://getbootstrap.com/">Bootstrap</a> for styling and <a href="https://gocardless.com/">GoCardless</a> for online direct debit payments</li>
</ul>


<h2>Amplify learning</h2>

<p><blockquote><p>Software development is a continuous learning process with the additional challenge of development teams and end product sizes.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>Working in a development team of one on this particular project obviously made knowledge sharing a non issue, however there were opportunities to ensure learning was applied instead of doing things the old way. Integrating the GoCardless payment system presented a great opportunity for learning. The club were reluctant to extend the existing paypal based solution due to the fees involved, with paypal charging nearly 4% per transaction.  So I did some research and found that the GoCardless direct debit service charged just 1% per transaction.</p>

<p>We decided to trial the system and I was pleasantly surprised by how intuitive it was it integrate with. They have <a href="https://developer.gocardless.com/">top notch documentation of their API</a> and client libraries for a wide range of platforms including ours, .NET. I had a test payment process integrated with our website within a couple of hours, their support was also excellent and helped clarify the few points I wasn&rsquo;t clear on regarding setting up specific redirect URLs.</p>

<p>The system has been up and running for around 6 months now and the only issue we&rsquo;ve had was with some intermittent error responses. Again their support team looked into the problem as soon as I raised it and implemented a fix. I&rsquo;m glad that I took the time to learn how to integrate with GoCardless as it has saved our small club hundreds of pounds in fees already!</p>

<h2>Decide as late as possible</h2>

<p><blockquote><p>As software development is always associated with some uncertainty, better results should be achieved with an options-based approach, delaying decisions as much as possible until they can be made based on facts and not on uncertain assumptions and predictions.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>Taking this approach has helped me avoid the common &lsquo;analysis paralysis&rsquo; problem whereby you try and solve too many problems at once, tie yourself in knots and deliver nothing! I deferred the implementation of several tricky  features and was pleasantly surprised that the solutions turned out to be more straight forward than I&rsquo;d originally anticipated.</p>

<p>For example we wanted to add an online entry system for several club events however the we needed to accept entries from club members, affiliated club members or guests. My initial thinking was to have an entry form for each type of entrant with some reporting so the event organisers could see who had entered. This sounded like a big feature that would take weeks to implement. So I started by just adding a simple form for existing members to enter our Duathlon event (fortunately no guests were allowed for our Duathlon!). Later on I returned to the problem of adding guest entries and suddenly it became obvious to me that guests could be members of the website as well just with a different role to limit their access. Then the same entry forms could be used for everyone and I wouldn&rsquo;t have to add any new reporting. Deferring the decision for how to implement this feature saved me loads of time and resulted in a simpler system, wins all round!</p>

<h2>Stay tuned for part II&hellip;</h2>

<p>The first three principles of Lean development have really helped me deliver on this project but there are still four more principles to go, so if you&rsquo;ve found this interesting check back soon for part II in the series!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Storming a Distributed Solution]]></title>
    <link href="https://bakingwebsites.co.uk/2014/01/29/event-storming/"/>
    <updated>2014-01-29T17:38:27+00:00</updated>
    <id>https://bakingwebsites.co.uk/2014/01/29/event-storming</id>
    <content type="html"><![CDATA[<p>Software design and development techniques are constantly evolving, making the discipline a fascinating area to work in. Over the time I&rsquo;ve been working as a developer I&rsquo;ve seen various approaches to design from Code First, Data Driven to Domain Driven (DDD). My preference is to consider the scope of the problem first and design a solution to match and DDD is a good fit for this. However when looking at enterprise level problems we need to give more consideration to how a problem will scale&hellip; enter Event Storming.</p>

<h2>Distributed design</h2>

<p>I work in a development team which is responsible for several key business capabilities, there are already some software solutions in place for these capabilities however they were designed several years ago to solve problems at a scale at least an order of magnitude below where we currently find ourselves. Our stakeholders have expressed a desire that we could redesign a solution which would meet our current needs better, basically it needs to work <strong>faster</strong>, do <em>just</em> what is needed and ideally <strong>scale</strong> so that it will still perform well at the next order of magnitude up.</p>

<p>We decided to have an Event Storming session to help us analyse the problem and come up with a high level distributed solution. We carried out the session in a couple of phases, first we reviewed the current solution, then we looked at the primary goals for the redesign then finally we started event storming a solution. Here are the team hard at work mid-storm:</p>

<p><img src="http://imageshack.com/a/img542/5968/1l37.jpg" class="alignleft" alttext="Octopress Logo"  /></p>

<h2>Collaborative analysis</h2>

<p>The session first involved us all writing down on post-it notes business events that had some relevance to the feature we were analysing. We then stuck all these onto a big board and de-duped them. It was a bit tricky to order the post-its at this stage so we went for a loose left to right time sequence.</p>

<p>Following this we got the post-it stack back in action and wrote down each of the commands that could have some influence on the events on the board. Then we linked each of the commands to events on the board, this wasn&rsquo;t always a one-to-one relationship which presented some practical problems, however on the whole I think working with physical post-its was far better than using something like Visio as its more democratic. Finally we arranged the post-its into discrete pieces of behaviour and mapped out the interactions between them.</p>

<p>It was important that we recognised the difference between an event and a command during the exercise. As a rule of thumb commands are carried out by users and events are raised by the system to indicate something has happened. For example the <em>Create Product</em> command is raised when the user saves a product entry, whereas <em>&lsquo;Product Created&rsquo;</em> event is raised after the transaction has finished and a product has been persisted in the system. As I alluded to earlier there is no hard one-to-one relationship here, a single command can often result in multiple events being raised and vice versa. Its important to make sure the distinction is clear to everyone before the session begins, it saves a lot of time in the long run!</p>

<p>The results of our session can be seen in the picture below:
<img src="http://imageshack.com/a/img34/1388/bbid.jpg" class="alignleft" alttext="Octopress Logo"  /></p>

<h2>A virtual solution</h2>

<p>By the end of the session we had a virtual solution figured out that could be implemented with discrete modules communicating exclusively via messaging. I was pleasantly surprised by the elegance of the solution, by focussing on the interactions between the systems and isolating responsibilities it was clear that we only needed to pass a small amount of data between each module and could effectively encapsulate the behaviour. However Event Storming is just one technique and I wouldn&rsquo;t suggest it is a magic bullet design technique, these are the main pros and cons as I see it.</p>

<h3>Advantages</h3>

<ul>
<li>Helps focus on the interactions between elements of a distributed system</li>
<li>The whole team is involved at the analysis stage and visualize the same proposed solution</li>
<li>Encourages scalable solutions</li>
</ul>


<h3>Drawbacks</h3>

<ul>
<li>Reliant on domain knowledge of team members to surface events / commands</li>
<li>Design can get lost in a sea of post-it notes!</li>
<li>Need to transfer quickly to implementation tasks to avoid losing insights</li>
</ul>


<p>I&rsquo;d be interested to hear of your experiences of event storming and how effective you have found it to be?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns Without Katas]]></title>
    <link href="https://bakingwebsites.co.uk/2013/06/13/design-patterns-without-katas/"/>
    <updated>2013-06-13T09:05:05+01:00</updated>
    <id>https://bakingwebsites.co.uk/2013/06/13/design-patterns-without-katas</id>
    <content type="html"><![CDATA[<p>There are a number of design patterns which I have chosen not to implement a coding kata for. This is because I felt that I would either not use the pattern regularly in practice or they have alternative solutions that make the pattern redundant. However I think it is worth calling out these patterns and summarising how they work.</p>

<h2>The decorator pattern</h2>


<p>This pattern provides a way of extending a classes behaviour without using inheritance, it is defined as:</p>

<blockquote>The decorator pattern extends the functionality of individual objects by wrapping them with one or more decorator classes. These decorators can modify existing members and add new methods and properties at run-time.</blockquote>


<p>The main reason I won&rsquo;t be using this pattern much in practice is that the class structure it generates is not very clear and also the behaviour of   the classes can change depending on the order they are instantiated. So I think implementing this pattern could cause more problems than it solves, especially if the system may need to be maintained by different people at a later date.</p>

<h2>The factory pattern</h2>




<blockquote><em>The factory method pattern allows for the creation of objects without specifying the type of object that is to be created in code. A factory class contains a method that allows determination of the created type at run-time.</em></blockquote>


<p>Whilst the factory method has its uses it is basically just an implementation of sub classing, where parameters are defined as base classes to allow different derived classes to be passed at runtime. It is a straightforward pattern and the coding kata would be pretty short to implement it.</p>

<p>Also one of the main issues the factory pattern tries to solve is centralising object creation, however we generally use IoC containers which provide <a href="http://stackoverflow.com/questions/871405/why-do-i-need-an-ioc-container-as-opposed-to-straightforward-di-code">low maintenance dependency injection</a>  out of the box. So this removes the main need for the factory pattern.</p>

<h2>The Singleton pattern</h2>




<blockquote>Ensure a class only has one instance and provide a global access point to it</blockquote>


<p><img class="alignright size-medium wp-image-460" alt="asparagus shoot from http://sandyspringcsa.com/" src="http://imageshack.com/a/img32/7137/uwa5.jpg" width="300" />
This is a pattern which can be very useful in applications, however the implementation is so short that a coding kata would have little content. There are just a couple of pitfalls to watch out for when implementing this pattern:</p>

<ul>
    <li><span style="line-height:16px;">Ensure the implementation is  thread safe
In Java the synchronized keyword can be used on the method which returns the singleton to ensure only a single thread ever has access to the class at once. However that can lead to the second pitfall</span></li>
    <li>Consider whether you implementation offers the best performance
Using synchronization is expensive (ie. It takes the computer a relatively long time to process)</li>
</ul>


<p>This implementation avoids both of these pitfalls by creating the <em>uniqueInstance</em> when the class is first loaded:</p>

<pre style="font-family:Andale Mono, Lucida Console, Monaco, fixed, monospace;color:#000000;background-color:#eee;font-size:12px;border:1px dashed #999999;line-height:14px;overflow:auto;width:100%;padding:5px;">public class Singleton {
  private static Singleton uniqueInstance = new Singleton();

  private Singleton() {}

  public static Singleton getInstance()  {
    return uniqueInstance;
  }
}</pre>


<p>Finally, as with the factory pattern, if you are using an IoC container then they generally provide a way to configure a class as a singleton so there is rarely a need to implement this pattern manually yourself.</p>

<h2>There may be more...</h2>


<p>Stay tuned for more patterns to be added to this post!</p>
]]></content>
  </entry>
  
</feed>
