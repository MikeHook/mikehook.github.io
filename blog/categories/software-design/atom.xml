<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Design | baking websites]]></title>
  <link href="http://bakingwebsites.co.uk/blog/categories/software-design/atom.xml" rel="self"/>
  <link href="http://bakingwebsites.co.uk/"/>
  <updated>2015-07-26T18:51:01+01:00</updated>
  <id>http://bakingwebsites.co.uk/</id>
  <author>
    <name><![CDATA[Mike Hook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Awesome Software With Lean Principles - Part II]]></title>
    <link href="http://bakingwebsites.co.uk/2015/07/26/lean-awesome-part-II/"/>
    <updated>2015-07-26T18:07:49+01:00</updated>
    <id>http://bakingwebsites.co.uk/2015/07/26/lean-awesome-part-II</id>
    <content type="html"><![CDATA[<p><img src="http://i49.photobucket.com/albums/f299/hookmike/74078639-2d6b-4179-883d-4be7d28c19c7_zpsbpo9illj.jpg" class="alignleft" title="Awesome image by Roberlan https://www.flickr.com/photos/roberlan" /></p>

<p>In the <a href="http://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I/">first part of Making awesome software with Lean principles</a> I started looking at how <a href="https://en.wikipedia.org/wiki/Lean_software_development">Lean principles</a> have helped me while working on the <a href="http://midsussextriclub.com/">Mid Sussex Tri Club website</a>.</p>

<p>The first three principles <strong>Eliminating waste</strong>, <strong>Amplifying learning</strong> and <strong>Deciding as late as possible</strong> are all fundamental to help guide software development. However they only form part of the picture, there are still four more principles remaining that help guide our decisions so let&rsquo;s take a look at them now.</p>

<h2>Deliver as fast as possible</h2>

<p><blockquote><p>In the era of rapid technology evolution, it is not the biggest that survives, but the fastest. The sooner the end product is delivered without major defects, the sooner feedback can be received, and incorporated into the next iteration.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I&rsquo;ve seen the benefits of an iterative approach over and again throughout my professional life so I regard this as an essential principle to apply to all software projects. I put in place a pretty slick release process as one of the first changes I made and have been reaping the benefits ever since. Basically any check-ins on the master branch of the source code repository are immediately deployed to the website. I&rsquo;ve already blogged about how I set-up this <a href="http://bakingwebsites.co.uk/2014/07/02/automated-azure-deployments/">&lsquo;zero-click&rsquo; deploy process</a> and it has worked largely without problems since set-up.</p>

<p>However, this technique must be used with caution and certainly in tandem with the &lsquo;<strong>Build quality in</strong>&rsquo; principle. It is essential to ensure that a suitable branching process is in place too and changes can only be deployed once they have been tested. If you are working in a larger team I&rsquo;d recommend limiting write access to the master branch to a single person who can coordinate the deployments. While automation is great for productivity people still need to understand how it all works and retain control of the systems.</p>

<h2>Empower the team</h2>

<p><blockquote><p>The lean approach favors the aphorism &ldquo;find good people and let them do their own job,&rdquo; encouraging progress, catching errors, and removing impediments, but not micro-managing.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I have been fortunate to be involved with an organisation that trusted me to make the technical decisions. I presented my ideas on the features to implement and got feedback on any changes they thought may be needed. So I was empowered to make the changes as and when they were needed. However I also think it is important to &lsquo;bring the stakeholders with you&rsquo; when making the changes. This has several benefits, not only does it help ensure that the features are relevant, it also gives me some good candidates for people to test the system before it goes live, which brings me neatly onto the next principle!</p>

<h2>Build quality in</h2>

<p><blockquote><p>Conceptual integrity means that the systemâ€™s separate components work well together as a whole with balance between flexibility, maintainability, efficiency, and responsiveness.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>As I mentioned earlier, this principle acts as a counterweight to some of the other Lean principles, such as <strong>Deliver as fast as possible</strong>, to help ensure that changes are not rushed and the software doesn&rsquo;t accumulate bugs and brittle implementations. For this project I&rsquo;ve not had the luxury of any other developers who could review the code, however I&rsquo;ve still ensured that changes are functionally reviewed before deploying them to the live site. To facilitate this I&rsquo;ve setup a &lsquo;staging&rsquo; environment using the same deployment technique running off a separate &lsquo;staging&rsquo; repository branch. I first implement the changes on the staging branch and only merge them into the live &lsquo;master&rsquo; branch once someone has tested them out on the staging website.</p>

<p>On one occasion I skipped the staging process and fate taught me a lesson! The update was to use an Umbraco plugin to automatically resize images but little did I know that there was a memory leak in the Umbraco plugin which meant the site quickly went over its memory allocation and Azure automatically took it offline. That was a nasty surprise to find on the live site and some load testing in the staging environment would certainly have helped!</p>

<h2>See the whole</h2>

<p><blockquote><p>By decomposing the big tasks into smaller tasks, and by standardizing different stages of development, the root causes of defects should be found and eliminated.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>There are two key elements to the last principle, <strong>See the whole</strong>. I&rsquo;ve already talked about how the staging and live environments are standardized, in my case this was a fairly trivial exercise made easy by modern hosting tools such as Azure and github that enable multiple environments to be set up at very low cost. The small fee to run an extra Azure database is well worth the value it adds for  the club.</p>

<p>The second element recommends splitting tasks into smaller pieces and is certainly one that I&rsquo;d advocate. Limiting the number of changes made at any one time really helps with tracking down issues. Its a practice which I&rsquo;ve learnt the hard way over the years, it can be tempting to try and &lsquo;fix the world&rsquo; when you get your hands on a code-base and hammer out a high number of changes in a short time. However, not only does this massively increase the probability for bugs, it also makes finding them much more difficult. Looking for a bug in a commit with 50+ changed files isn&rsquo;t much fun!</p>

<p>I&rsquo;ve used the <a href="https://github.com/MikeHook/MSTC/issues">github issue tracker</a> on this project, which may seem a bit odd when there is no one else to share the work with, however it has helped keep me focussed on what I&rsquo;ve been trying to achieve, also its nice to get the satisfaction of pressing the &lsquo;Closed&rsquo; button after fixing each issue!</p>

<h2>Lean == Awesome</h2>

<p>I hope you&rsquo;ve enjoyed reading about my experiences with Lean principles. I&rsquo;d love to hear about any opinions you&rsquo;ve got regarding the way I&rsquo;ve interpreted the principles or how you&rsquo;ve used the principles to make your own awesome software, so feel free to comment on the posts below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Awesome Software With Lean Principles - Part 1]]></title>
    <link href="http://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I/"/>
    <updated>2015-07-19T18:12:49+01:00</updated>
    <id>http://bakingwebsites.co.uk/2015/07/19/lean-awesome-part-I</id>
    <content type="html"><![CDATA[<p><a href="http://midsussextriclub.com"><img src="http://i49.photobucket.com/albums/f299/hookmike/MSTC%20_logo_yellow_280_zps4tnfm4qj.jpg" class="alignleft" alttext="MSTC Logo" /></a></p>

<p>I&rsquo;ve been a keen amateur triathlete and member the <a href="http://midsussextriclub.com">Mid Sussex Tri Club</a> for a couple of years. Its a relatively small club but there is a surprising amount of administration involved in running it and after chatting to some of the clubs committee members it was clear that the admin overheads were becoming a burden. I could see the potential for software to help lessen the burden so I offered to take on the club&rsquo;s website and add some features to it.</p>

<p>Fast forward a year and we have a greatly enhanced website with new features that have helped grow the club without taking up more of people&rsquo;s time. Throughout making these changes I&rsquo;ve applied Lean software principles which have really helped me. So in this post I&rsquo;m taking a look at the first 3 principles of Lean and how these have assisted on this project.</p>

<h2>Eliminate waste</h2>

<p><blockquote><p>Lean philosophy regards everything not adding value to the customer as waste.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>I had great motivation to ensure that this principle was applied as I&rsquo;ve been making all the changes during my spare time. Its amazing what you can achieve in a short amount of time with a bit of planning. For example just last week I was able to add 2 new payment options to the site in an hour. The key techniques I&rsquo;ve used to help eliminate waste are:</p>

<ul>
<li>Make sure I understand what the key stakeholder wants to achieve from the feature before implementing it</li>
<li>Design directly in HTML &ndash; I&rsquo;ve designed all the new user interfaces directly in HTML so when it comes to implementing the feature I just need to enhance the existing HTML with the dynamic data elements</li>
<li>Use third parties to do the heavy lifting (ie. don&rsquo;t reinvent the wheel). For this project the key third party systems used are <a href="http://umbraco.com/">Umbraco</a> for content management, <a href="http://getbootstrap.com/">Bootstrap</a> for styling and <a href="https://gocardless.com/">GoCardless</a> for online direct debit payments</li>
</ul>


<h2>Amplify learning</h2>

<p><blockquote><p>Software development is a continuous learning process with the additional challenge of development teams and end product sizes.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>Working in a development team of one on this particular project obviously made knowledge sharing a non issue, however there were opportunities to ensure learning was applied instead of doing things the old way. Integrating the GoCardless payment system presented a great opportunity for learning. The club were reluctant to extend the existing paypal based solution due to the fees involved, with paypal charging nearly 4% per transaction.  So I did some research and found that the GoCardless direct debit service charged just 1% per transaction.</p>

<p>We decided to trial the system and I was pleasantly surprised by how intuitive it was it integrate with. They have <a href="https://developer.gocardless.com/">top notch documentation of their API</a> and client libraries for a wide range of platforms including ours, .NET. I had a test payment process integrated with our website within a couple of hours, their support was also excellent and helped clarify the few points I wasn&rsquo;t clear on regarding setting up specific redirect URLs.</p>

<p>The system has been up and running for around 6 months now and the only issue we&rsquo;ve had was with some intermittent error responses. Again their support team looked into the problem as soon as I raised it and implemented a fix. I&rsquo;m glad that I took the time to learn how to integrate with GoCardless as it has saved our small club hundreds of pounds in fees already!</p>

<h2>Decide as late as possible</h2>

<p><blockquote><p>As software development is always associated with some uncertainty, better results should be achieved with an options-based approach, delaying decisions as much as possible until they can be made based on facts and not on uncertain assumptions and predictions.</p><footer><strong>Wikipedia <a href="https://en.wikipedia.org/wiki/Lean_software_development">https://en.wikipedia.org/wiki/Lean_software_development</a> Lean software development</strong></footer></blockquote></p>

<p>Taking this approach has helped me avoid the common &lsquo;analysis paralysis&rsquo; problem whereby you try and solve too many problems at once, tie yourself in knots and deliver nothing! I deferred the implementation of several tricky  features and was pleasantly surprised that the solutions turned out to be more straight forward than I&rsquo;d originally anticipated.</p>

<p>For example we wanted to add an online entry system for several club events however the we needed to accept entries from club members, affiliated club members or guests. My initial thinking was to have an entry form for each type of entrant with some reporting so the event organisers could see who had entered. This sounded like a big feature that would take weeks to implement. So I started by just adding a simple form for existing members to enter our Duathlon event (fortunately no guests were allowed for our Duathlon!). Later on I returned to the problem of adding guest entries and suddenly it became obvious to me that guests could be members of the website as well just with a different role to limit their access. Then the same entry forms could be used for everyone and I wouldn&rsquo;t have to add any new reporting. Deferring the decision for how to implement this feature saved me loads of time and resulted in a simpler system, wins all round!</p>

<h2>Stay tuned for part II&hellip;</h2>

<p>The first three principles of Lean development have really helped me deliver on this project but there are still four more principles to go, so if you&rsquo;ve found this interesting check back soon for part II in the series!</p>
]]></content>
  </entry>
  
</feed>
